/*
 * Copyright (c) 2014,2015 Ahome' Innovation Technologies. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories { mavenCentral() }
    dependencies {
        classpath(group: 'org.ajoberstar', name: 'grgit', version: '1.3.0')
    }
}

import java.util.List
import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import java.net.InetAddress
import org.ajoberstar.grgit.Grgit

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'signing'

sourceCompatibility = 1.7

targetCompatibility = 1.7

version = '1.0.108-RELEASE'

group = 'com.ahome-it'

task('deleteConfigs', type: Delete) {
    FileTree tree = fileTree (dir: 'build/resources/main')
    tree.each { File file ->
        delete(file)
    }
}

task('filterConfigs', dependsOn: deleteConfigs, type: Copy) {
    from sourceSets.main.allSource
    into 'build/resources/main'
    filter(FixCrLfFilter)
    filter(ReplaceTokens, tokens: getFilterTokens())
}

task doJavaDocs(type: Groovydoc) {
    source = sourceSets.main.allSource
    classpath = sourceSets.main.runtimeClasspath
    destinationDir = file('build/docs/javadoc')
    docTitle = "${getProjectCommonName()}"
    footer = "<small><a href=\"${getBuildGITHomeURL()}\" target=\"_blank\">${getProjectCommonName()} - ${getBuildModuleVersion()} - Author: Dean S. Jones</a></small>"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: doJavaDocs) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

compileJava.dependsOn(clean)

jar.dependsOn(filterConfigs)

jar {
    manifest {
        attributes 'Implementation-Title': getProjectTitle(), 'Implementation-Version': getBuildModuleVersion()
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        resources { source groovy }
    }
    test {
        resources { source groovy }
    }
}

task codeCoverage << {
    println "Finished tests and code coverage."
}

codeCoverage.dependsOn jacocoTestReport

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "build/jacoco/jacoco_html"
    }
}

jacocoTestReport.dependsOn test

test {
    jacoco {
        append = false
        destinationFile = file("build/jacoco/testing.exec")
        classDumpFile = file("build/jacoco/classpathdumps")
    }
}

tasks.withType(GroovyCompile) {
    groovyOptions.optimizationOptions.indy = true
}

def getFilterTokens() {
    [GRADLE_BUILD_ARTIFACT_ID: getProjectArtifactID(), GRADLE_BUILD_PROJECT_TITLE: getProjectTitle(), GRADLE_BUILD_USER: getBuildUser(), GRADLE_BUILD_DATE: getBuildDate(), GRADLE_JAVA_VERSION: getJavaVersion(), GRADLE_GIT_COMMIT_HASH: getBuildGITCommitHash(), GRADLE_GIT_COMMIT_USER: getBuildGITCommitUser(), GRADLE_GIT_COMMIT_MESSAGE: getBuildGITCommitMessage(), GRADLE_BUILD_SERVER_HOST: getBuildServerHost(), GRADLE_BUILD_SERVER_BUILD: getBuildServerBuild(), GRADLE_BUILD_MODULE_VERSION: getBuildModuleVersion()]
}

def getProjectArtifactID() {
    'ahome-tooling-server-core'
}

def getProjectTitle() {
    'Ahome-Tooling-Server-Core'
}

def getProjectCommonName() {
    'Ahome Tooling Server Core'
}

def getBuildModuleVersion() {
    version
}

def getBuildDate() {
    (new Date()).toString()
}

def getBuildServerHost() {
    try {
        InetAddress.getLocalHost().getHostName()
    }
    catch (Exception e) {
        "localhost"
    }
}

def getJavaVersion() {
    System.getProperty('java.version') ?: 'unknown'
}

def getBuildUser() {
    System.getProperty('user.name') ?: 'unknown'
}

def getBuildServerBuild() {
    System.getProperty('BUILD_DISPLAY_NAME') ?: 'Command line ' + GradleVersion.current().toString()
}

def getBuildGITHomeURL() {
    'https://github.com/ahome-it/' + getProjectArtifactID()
}

def getBuildGITCommitHash() {
    getBuildGITHomeURL() + '/commit/' + Grgit.open(project.file('.')).head().id
}

def getBuildGITCommitUser() {
    Grgit.open(project.file('.')).head().committer.email
}

def getBuildGITCommitMessage() {
    Grgit.open(project.file('.')).head().shortMessage
}

configurations {
    compile.exclude(group: 'net.jcip', module: 'jcip-annotations')
}

dependencies {
    springCorePackages().each { String name ->
        compile(group: 'org.springframework', name: name, version: '4.1.7.RELEASE')
    }
    springSecurityPackages().each { String name ->
        compile(group: 'org.springframework.security', name: name, version: '4.0.1.RELEASE')
    }
    springIntegrationPackages().each { String name ->
        compile(group: 'org.springframework.integration', name: name, version: '4.1.6.RELEASE')
    }
    compile(group: 'org.springframework.session', name: 'spring-session', version: '1.0.1.RELEASE')
    compile(group: 'org.springframework.integration', name: 'spring-integration-flow', version: '1.0.0.RELEASE')
    compile(group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.4', classifier: 'indy')
    compile(group: 'org.codehaus.gpars', name: 'gpars', version: '1.2.1')
    compile(group: 'log4j', name: 'log4j', version: '1.2.17')
    compile(group: 'com.google.guava', name: 'guava', version: '18.0')
    compile(group: 'commons-io', name: 'commons-io', version: '2.4')
    compile(group: 'commons-codec', name: 'commons-codec', version: '1.10')
    compile(group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.2')
    compile(group: 'com.ahome-it', name: 'ahome-tooling-json', version: '1.0.45-RELEASE')
    compile(group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0')
    compile(group: 'javax.jms', name: 'jms-api', version: '1.1-rev-1')
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives jar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: "${sonatype_staging_URL}") {
                authentication(userName: "${sonatype_user}", password: "${sonatype_password}")
            }
            pom.project {
                name 'Ahome-Tooling-Server-Core'
                packaging 'jar'
                description 'Ahome Tooling Server Core'
                url 'https://github.com/ahome-it/ahome-tooling-server-core'
                scm {
                    url 'scm:git@github.com:ahome-it/ahome-tooling-server-core.git'
                    connection 'scm:git@github.com:ahome-it/ahome-tooling-server-core.git'
                    developerConnection 'scm:git@github.com:ahome-it/ahome-tooling-server-core.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'sprocketnyc'
                        name 'Dean S. Jones'
                        email 'deansjones@gmail.com'
                        url 'http://www.lienzo-core.com'
                    }
                }
            }
        }
    }
}

def List<String> springCorePackages() {
    return [
        'spring-core',
        'spring-beans',
        'spring-context',
        'spring-context-support',
        'spring-expression',
        'spring-aop',
        'spring-aspects',
        'spring-instrument',
        'spring-instrument-tomcat',
        'spring-messaging',
        'spring-jdbc',
        'spring-tx',
        'spring-orm',
        'spring-oxm',
        'spring-jms',
        'spring-web',
        'spring-websocket',
        'spring-test'
    ]
}

def List<String> springSecurityPackages() {
    return [
        'spring-security-web',
        'spring-security-acl',
        'spring-security-cas',
        'spring-security-ldap',
        'spring-security-crypto',
        'spring-security-config',
        'spring-security-aspects',
    ]
}

def List<String> springIntegrationPackages() {
    return [
        'spring-integration-core',
        'spring-integration-jms',
        'spring-integration-xml',
        'spring-integration-feed',
        'spring-integration-event',
        'spring-integration-file',
        'spring-integration-security'
    ]
}